import  socket
import sys
import getopt
import threading
import subprocess

#定义一些全局变量
listen=False
command=False
upload=False
execute=""
target=""
upload_distination=""
port=""
#主函数
def usage():
    print("BHP NET TOOL")
    print
    print "usage:bhpnet.py -t target_host -p port"
    print "-l --listen                         -listen on [host]:[port] for incoming connections"
    print "-e --execute=file_to_run  -execute the give file upon receiveing a connection"
    #... 其他命令解释以后再写

    sys.exit(0)

def main():
    global listen
    global  port
    global execute
    global command
    global upload_destination
    global target

    if not len(sys.argv[1:]):
        usage()
    #读取命令行选项  
    try:
        opts, args=getopt.getopt(sys.argv [1:],"hle:t:p:cu:",
                                 ["help","listen","execute=","target=","port=","command","upload="])
    except getopt.GetoptError as err:
        print str(err)
        usage()

for o,a in opts:
    if o in ("-h","--help"):
        usage()
    elif o in ("-l","--listen"):
        listen=True
     elif o in ("-e","--execute"):
        execute=a
     elif o in ("-t","--target"):
        target= a
      elif o in ("-p","--port"):
         port=int(a)
      elif o in ("-c","--command"):
         command=True
      elif o in ("-u","--upload"):
         upload_destination=a
      else:
          assert False  ,"unhandled Optior"
          
       #标准输入读取数据
          #不监听时
          if  not listen and  len(target) and port>0:
              #从内存读取数据
              #

              buffer =sys.stdin.read()
              #发送数据
              client_sender(buffer)
           #监听时
              #放置一个反弹shell？
           if  listen:
               server_loop()

main()
def client_sender(buffer):
    
    client=socket.socket(socket.AF_INET,socket.SOCK_STREAM)

    try:
        #连接到目标主机
        client.connect((garget,port))

        if len(buffer):
            client.send(buffer)

         while  True:
             #等待数据回传
             recv_len=1
             response=""

             while rece_len:
                 data =client.recv(4096)
                 recv_len=len(data)
                 response+=data

                 if  recv_len < 4096:
                     break

                 print response,
                 #等待更多输入

                 buffer=raw_input ("")
                 buffer+="\n"

                 #发送出去
                 client.send(buffer)

     except:
         print "[*] execuption! exiting."

         #关闭连接
         client.close()

def server_loop():
    global target 
    
                 
                 
         
    
